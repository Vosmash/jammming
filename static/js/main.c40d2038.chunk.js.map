{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","accessToken","Spotify","getAccessToken","tokenFound","window","location","href","match","expiresIn","Number","setTimeout","history","pushState","url","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","userID","method","Content-Type","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","newPlaylist","find","currentTrack","push","filter","trackURI","forEach","_this2","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c40d2038.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"SearchBar\">\r\n  <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n  <a onClick={this.search}>SEARCH</a>\r\n</div>\r\n  )}\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return (<a className=\"Track-action\" onClick={this.removeTrack}>-</a>)\r\n    } else {\r\n      return (<a className=\"Track-action\" onClick={this.addTrack}>+</a>)\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track)\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"Track\">\r\n      <div className=\"Track-information\">\r\n        <h3>{this.props.track.name}</h3>\r\n        <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n      </div>\r\n       {this.renderAction()}\r\n    </div>\r\n  )}\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track.js'\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"TrackList\">\r\n    {this.props.tracks.map(track => {\r\n      return <Track track={track} key={track.id} onRemove={this.props.onRemove} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval}/>\r\n    })}\r\n</div>\r\n  )}\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList.js';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"SearchResults\">\r\n  <h2>Results</h2>\r\n  <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n</div>\r\n  )}\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList.js';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"Playlist\">\r\n  <input value={this.props.playlistName} onChange={this.handleNameChange}/>\r\n  <TrackList isRemoval={true} tracks={this.props.playlistTracks} onRemove={this.props.onRemove} />\r\n  <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n</div>\r\n  )}\r\n}\r\n\r\nexport default Playlist;\r\n","const clientID = '061f2a636fbf4af3a1b5ffc8db23d8bb';\r\nconst redirectURI = \"https://vosmash.github.io/jammming/\";\r\nlet accessToken = null;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    const tokenFound = window.location.href.match(/access_token=([^&]*)/);\r\n    let expiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessToken !== null) {\r\n      return accessToken\r\n    } else if (tokenFound && expiresIn) {\r\n      accessToken = tokenFound[1];\r\n      expiresIn = Number(expiresIn[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const url =`https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n      window.location = url\r\n    }\r\n},\r\n\r\n  search(term) {\r\n    Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {Authorization: `Bearer ${accessToken}`}\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n          return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n          }))\r\n        }\r\n      )\r\n  },\r\n\r\n  savePlaylist(playlistName, trackURIs) {\r\n    Spotify.getAccessToken();\r\n    const endpoint = 'https://api.spotify.com/v1/me'\r\n\r\n    fetch(endpoint, { headers: {Authorization: `Bearer ${accessToken}`} }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      let userID = jsonResponse.id\r\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ name: playlistName })\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        let playlistID = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n          body: JSON.stringify({ uris: trackURIs })\r\n          })\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\nexport default Spotify\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.removeTrack = this.removeTrack.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let newPlaylist = this.state.playlistTracks;\n    if (newPlaylist.find(currentTrack => currentTrack.id === track.id)) {\n      return;\n    } else {\n      newPlaylist.push(track)\n      this.setState({ playlistTracks: newPlaylist })\n    }\n  }\n\n  removeTrack(track) {\n    let newPlaylist = this.state.playlistTracks.filter(currentTrack => currentTrack.id !== track.id)\n    this.setState({ playlistTracks: newPlaylist})\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name })\n  }\n\n  savePlaylist() {\n    let trackURI = [];\n    this.state.playlistTracks.forEach(track => trackURI.push(track.uri));\n    Spotify.savePlaylist(this.state.playlistName, trackURI);\n    this.setState({\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}